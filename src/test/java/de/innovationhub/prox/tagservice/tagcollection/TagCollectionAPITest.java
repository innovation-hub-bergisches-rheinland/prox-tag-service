package de.innovationhub.prox.tagservice.tagcollection;

import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.fasterxml.jackson.databind.ObjectMapper;
import de.innovationhub.prox.tagservice.tag.Tag;
import de.innovationhub.prox.tagservice.tag.TagEventHandler;
import de.innovationhub.prox.tagservice.tag.TagName;
import de.innovationhub.prox.tagservice.tag.TagRepository;
import de.innovationhub.prox.tagservice.tagcollection.TagCollection;
import de.innovationhub.prox.tagservice.tagcollection.TagCollectionRepository;
import java.util.Collections;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.autoconfigure.orm.jpa.AutoConfigureDataJpa;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.hateoas.server.EntityLinks;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.transaction.annotation.Transactional;

/**
 * These tests will test the controller mapping on /tagCollections for basic CRUD functionality. As
 * the controllers are generated by Spring Data and an intense testing of them would end up as
 * testing the framework, the tests in this class should be considered as an integration test
 * between API and database.
 *
 * <p>The test class excludes the Security Filter Chain and mocks the web service Also it makes use
 * of the DataJpa test to rollback transactions after each test
 */
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@AutoConfigureDataJpa
@Transactional
class TagCollectionAPITest {
  private static final String TAG_COLLECTIONS_ROUTE = "/tagCollections";
  private static final String TAG_COLLECTIONS_ID_ROUTE = "/tagCollections/{id}";
  private static final String TAG_COLLECTIONS_ID_TAGS_ROUTE = "/tagCollections/{id}/tags";

  @Autowired
  TagCollectionRepository tagCollectionRepository;

  @Autowired
  TagRepository tagRepository;

  @Autowired MockMvc mockMvc;

  @Autowired EntityLinks entityLinks;

  @MockBean
  TagEventHandler tagEventHandler;

  @MockBean
  TagCollectionEventHandler tagCollectionEventHandler;

  // GET /tagCollections
  @Test
  void when_get_tag_collections_then_found() throws Exception {
    UUID projectId = UUID.randomUUID();
    Tag tag1 = new Tag(new TagName("Tag1"));
    Tag tag2 = new Tag(new TagName("Tag2"));
    TagCollection tagCollection = new TagCollection(projectId, Set.of(tag1, tag2));
    tagRepository.saveAll(Set.of(tag1, tag2));
    tagCollectionRepository.save(tagCollection);

    MvcResult mvcResult =
        mockMvc
            .perform(get(TAG_COLLECTIONS_ROUTE))
            .andDo(print())
            .andExpect(status().isOk())
            .andExpect(
                jsonPath("$._embedded.tagCollections[0].referencedEntity")
                    .value(projectId.toString()))
            .andReturn();
  }

  // GET /tagCollections/{id}
  @Test
  void when_get_tag_collections_id_then_found() throws Exception {
    UUID projectId = UUID.randomUUID();
    Tag tag1 = new Tag(new TagName("Tag1"));
    Tag tag2 = new Tag(new TagName("Tag2"));
    TagCollection tagCollection = new TagCollection(projectId, Set.of(tag1, tag2));
    tagRepository.saveAll(Set.of(tag1, tag2));
    tagCollectionRepository.save(tagCollection);

    mockMvc
        .perform(get(TAG_COLLECTIONS_ID_ROUTE, projectId))
        .andDo(print())
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.referencedEntity").value(projectId.toString()));
  }

  // GET /tagCollections/{id}/tags
  @Test
  void when_get_tag_collections_id_tags_then_found() throws Exception {
    UUID projectId = UUID.randomUUID();
    Tag tag1 = new Tag(new TagName("Tag1"));
    Tag tag2 = new Tag(new TagName("Tag2"));
    TagCollection tagCollection = new TagCollection(projectId, Set.of(tag1, tag2));
    tagRepository.saveAll(Set.of(tag1, tag2));
    tagCollectionRepository.save(tagCollection);

    mockMvc
        .perform(get(TAG_COLLECTIONS_ID_TAGS_ROUTE, projectId))
        .andDo(print())
        .andExpect(status().isOk())
        .andExpect(jsonPath("$._embedded.tags[*].id", containsInAnyOrder(tag1.getId().toString(), tag2.getId().toString())))
        .andExpect(jsonPath("$._embedded.tags[*].tagName", containsInAnyOrder(tag1.getTagName().getTagName(), tag2.getTagName().getTagName())));
  }

  // DELETE /tagCollections/{id}
  @Test
  void when_delete_tag_collections_id_then_not_found() throws Exception {
    UUID projectId = UUID.randomUUID();
    Tag tag1 = new Tag(new TagName("Tag1"));
    Tag tag2 = new Tag(new TagName("Tag2"));
    TagCollection tagCollection = new TagCollection(projectId, Set.of(tag1, tag2));
    tagRepository.saveAll(Set.of(tag1, tag2));
    tagCollectionRepository.save(tagCollection);

    mockMvc
        .perform(delete(TAG_COLLECTIONS_ID_ROUTE, tagCollection.getReferencedEntity()))
        .andDo(print())
        .andExpect(status().isNoContent());

    assertTrue(tagCollectionRepository.findById(tagCollection.getReferencedEntity()).isEmpty());
  }

  // POST /tagCollections
  @Test
  void when_post_tag_collections_then_found() throws Exception {
    UUID projectId = UUID.randomUUID();
    TagCollection tagCollection = new TagCollection(projectId);

    mockMvc
        .perform(
            post(TAG_COLLECTIONS_ROUTE)
                .contentType(MediaType.APPLICATION_JSON)
                .content(new ObjectMapper().writeValueAsString(tagCollection)))
        .andDo(print())
        .andExpect(status().isCreated());

    Optional<TagCollection> optional = tagCollectionRepository.findById(projectId);
    assertTrue(optional.isPresent());
    assertEquals(tagCollection, optional.get());
  }

  // POST /tagCollections/{id}/tags
  @Test
  void when_post_tag_collections_id_tags_then_found() throws Exception {
    Tag tag1 = new Tag(new TagName("Tag1"));
    Tag tag2 = new Tag(new TagName("Tag2"));
    tagRepository.saveAll(Set.of(tag1, tag2));

    UUID projectId = UUID.randomUUID();
    TagCollection tagCollection = new TagCollection(projectId);
    tagCollectionRepository.save(tagCollection);
    tagCollection.getTags().addAll(Set.of(tag1, tag2));

    String linkToTag1 = entityLinks.linkToItemResource(Tag.class, tag1.getId()).expand().getHref();
    String linkToTag2 = entityLinks.linkToItemResource(Tag.class, tag2.getId()).expand().getHref();
    String links = linkToTag1 + System.lineSeparator() + linkToTag2;

    mockMvc
        .perform(
            post(TAG_COLLECTIONS_ID_TAGS_ROUTE, projectId)
                .contentType("text/uri-list")
                .content(links))
        .andDo(print())
        .andExpect(status().isNoContent());

    Optional<TagCollection> optional = tagCollectionRepository.findById(projectId);
    assertTrue(optional.isPresent());
    assertEquals(tagCollection, optional.get());
  }

  // PATCH /tagCollections/{id} -- not testable TODO verify
  // PUT /tagCollections/{id} -- not testable TODO verify

  // PUT /tagCollections/{id}/tags
  @Test
  void when_put_tag_collections_id_tags_then_found() throws Exception {
    Tag tag1 = new Tag(new TagName("Tag1"));
    Tag tag2 = new Tag(new TagName("Tag2"));
    tagRepository.saveAll(Set.of(tag1, tag2));
    UUID projectId = UUID.randomUUID();
    TagCollection tagCollection = new TagCollection(projectId, Set.of(tag1, tag2));
    tagCollectionRepository.save(tagCollection);

    Tag newTag1 = new Tag(new TagName("NewTag1"));
    Tag newTag2 = new Tag(new TagName("NewTag2"));
    tagRepository.saveAll(Set.of(newTag1, newTag2));
    TagCollection newTagCollection = new TagCollection(projectId, Set.of(newTag1, newTag2));

    String linkToTag1 =
        entityLinks.linkToItemResource(Tag.class, newTag1.getId()).expand().getHref();
    String linkToTag2 =
        entityLinks.linkToItemResource(Tag.class, newTag2.getId()).expand().getHref();
    String links = linkToTag1 + System.lineSeparator() + linkToTag2;

    mockMvc
        .perform(
            put(TAG_COLLECTIONS_ID_TAGS_ROUTE, projectId)
                .contentType("text/uri-list")
                .content(links))
        .andDo(print())
        .andExpect(status().isNoContent());

    Optional<TagCollection> optional = tagCollectionRepository.findById(projectId);
    assertTrue(optional.isPresent());
    assertEquals(newTagCollection, optional.get());
  }

  // PATCH /tagCollections/{id}/tags
  @Test
  void when_patch_tag_collections_id_tags_then_found() throws Exception {
    Tag tag1 = new Tag(new TagName("Tag1"));
    Tag tag2 = new Tag(new TagName("Tag2"));
    tagRepository.saveAll(Set.of(tag1, tag2));
    UUID projectId = UUID.randomUUID();
    TagCollection tagCollection = new TagCollection(projectId, Set.of(tag1, tag2));
    tagCollectionRepository.save(tagCollection);

    Tag newTag1 = new Tag(new TagName("NewTag1"));
    tagRepository.saveAll(Collections.singleton(newTag1));
    TagCollection newTagCollection =
        new TagCollection(projectId, Set.of(tag1, tag2, newTag1));

    String linkToTag1 =
        entityLinks.linkToItemResource(Tag.class, newTag1.getId()).expand().getHref();

    mockMvc
        .perform(
            patch(TAG_COLLECTIONS_ID_TAGS_ROUTE, projectId)
                .contentType("text/uri-list")
                .content(linkToTag1))
        .andDo(print())
        .andExpect(status().isNoContent());

    Optional<TagCollection> optional = tagCollectionRepository.findById(projectId);
    assertTrue(optional.isPresent());
    assertEquals(newTagCollection, optional.get());
  }
}
